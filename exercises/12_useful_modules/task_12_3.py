# -*- coding: utf-8 -*-
'''
Задание 12.3


Создать функцию print_ip_table, которая отображает таблицу доступных и недоступных IP-адресов.

Функция ожидает как аргументы два списка:
* список доступных IP-адресов
* список недоступных IP-адресов

Результат работы функции - вывод на стандартный поток вывода таблицы вида:

Reachable    Unreachable
-----------  -------------
10.1.1.1     10.1.1.7
10.1.1.2     10.1.1.8
             10.1.1.9

Функция не должна изменять списки, которые переданы ей как аргументы.
То есть, до выполнения функции и после списки должны выглядеть одинаково.


Для этого задания нет тестов
'''
#Нам понадобится модуль tabulate
from tabulate import tabulate

#Создадим функцию
def print_ip_table(ip_r, ip_unr):
#Список columns содержит имена столбцов
    columns = ['Reachable', 'Unreachable']
#Узнаём и запоминаем число элементов в списках
    num_ip_r = len(ip_r)
    num_ip_unr = len(ip_unr)
#Нам нужен список списков, его потом передадим tabulate
    print_ls = []
#Если хотя бы один индекс списка больше нуля, перебираем элеметы списка
    while (num_ip_r > 0 or num_ip_unr > 0):
#В этот список помещаем текущий элемент из списков доступных
#и недоступных адресов
        row_ls = []
#Уменьшаем на единицу индекс списков
        num_ip_r = num_ip_r - 1
        num_ip_unr = num_ip_unr - 1
#Если индекс списка доступных адресов меньше нуля, список пуст,
#добавляем пустую строку в row_ls. Иначе текущий элемент списка
#Дальше тоже самое делаем для индекса списка недоступных адресов
        if num_ip_r < 0:
            row_ls.append('')
        else:
            row_ls.append(ip_r[num_ip_r])
        if num_ip_unr < 0:
            row_ls.append('')
        else:
            row_ls.append(ip_unr[num_ip_unr])
			
        print_ls.append(row_ls)
#Можно отсортировать список
#    print_ls.sort()
    print(tabulate(print_ls, headers = columns))
#
#Создадим списки доступных и недоступных IP-адресов
ip_r = ['10.1.1.1', '10.1.1.2']
ip_unr = ['10.1.1.7', '10.1.1.8', '10.1.1.9']
#Вызываем функцию
print_ip_table(ip_r, ip_unr)
