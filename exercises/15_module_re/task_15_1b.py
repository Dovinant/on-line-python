# -*- coding: utf-8 -*-
'''
Задание 15.1b

Проверить работу функции get_ip_from_cfg из задания 15.1a на конфигурации config_r2.txt.

Обратите внимание, что на интерфейсе e0/1 назначены два IP-адреса:
interface Ethernet0/1
 ip address 10.255.2.2 255.255.255.0
 ip address 10.254.2.2 255.255.255.0 secondary

А в словаре, который возвращает функция get_ip_from_cfg, интерфейсу Ethernet0/1
соответствует только один из них (второй).

Скопировать функцию get_ip_from_cfg из задания 15.1a и переделать ее таким образом,
чтобы в значении словаря она возвращала список кортежей для каждого интерфейса.
Если на интерфейсе назначен только один адрес, в списке будет один кортеж.
Если же на интерфейсе настроены несколько IP-адресов, то в списке будет несколько кортежей.
Ключом остается имя интерфейса.

Проверьте функцию на конфигурации config_r2.txt и убедитесь, что интерфейсу
Ethernet0/1 соответствует список из двух кортежей.

Обратите внимание, что в данном случае, можно не проверять корректность IP-адреса,
диапазоны адресов и так далее, так как обрабатывается вывод команды, а не ввод пользователя.

'''


#Нам нужен модуль re
import re
# И модуль pprint чтобы красиво отображать вывод
from pprint import pprint

#Создадим функцию
def get_ip_from_cfg(file_name):

#Создаём регулярное выражение
#В первую группу (\d+.\d+.\d+.\d+) попадёт IP, во вторую MASK,
#Третья группу именованная, называется 'secondary',
#в неё попадает ключевое слово 'secondary' если есть второй адрес на интерфейсе
#Именованную группу делаем потому что метод lastgroup работает только с именованными группами

    regex = (r'ip address (\d+.\d+.\d+.\d+) (\d+.\d+.\d+.\d+) (?P<secondary>secondary)'r'|ip address (\d+.\d+.\d+.\d+) (\d+.\d+.\d+.\d+)')

#Создадим пустой словарь. Потом в него поместим кортежи

    result = {}
		
#Открываем файл построчно

    with open(file_name) as f:
        for line in f:
#Если строка начинается со слова 'interface' запомним его имя		
            if line.startswith('interface'):
                intf = re.search('interface (\S+)', line).group(1)
#Создаём список, в него потом запишем кортежи				
                list_tmp = []
#Иначе ищем IP и маску				
            else:
                match = re.search(regex, line)
                if match:
#Если поймали что-то регулярным выражением смотрим последнюю найденную группу
#если это группа 'secondary', значит на интерфейсе два IP.
#В кортеж tuple_r попадает 1-я и 2-я группы, сам кортеж попадает в список list_tmp
#а список в словарь
#Иначе на интерфейсе только один IP, в кортеж пишем 4 и 5 группы (3-я группа это 'secondary')
#Скрипт сначала найдёт основной адрес и добавит его в список, а потом в словарь.
#Затем найдёт второй IP, если он есть, добавит его в список и перезапишет значение в словаре
#т.к. ключ, т.е. имя интерфейса, ещё не поменялось
                    if match.lastgroup == 'secondary':
                        tuple_r = (match.group(1), match.group(2))
                        list_tmp.append(tuple_r)
                    else:
                        tuple_r = (match.group(4), match.group(5))
                        list_tmp.append(tuple_r)

                    result[intf] = list_tmp
		    	
                
    return(result)
#

pprint(get_ip_from_cfg('config_r2.txt'))
