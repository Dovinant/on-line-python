# -*- coding: utf-8 -*-
'''
Задание 5.1

Запросить у пользователя ввод IP-сети в формате: 10.1.1.0/24

Затем вывести информацию о сети и маске в таком формате:

Network:
10        1         1         0
00001010  00000001  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000

Проверить работу скрипта на разных комбинациях сеть/маска.

Ограничение: Все задания надо выполнять используя только пройденные темы.
'''
print("Please input address/mask")

# Аргумент надо обязательно передавать в кавычках!
NetMask = input(("For example '10.1.1.0/24': "))

# Получили адрес/маску.
# Теперь разносим маску и адрес испульзуя метод find() и срез
# См. стр. 93, 95 учебника
Net = NetMask[0:NetMask.find('/')]

# Так получим саму битовую маску, без "/"
# Если нужен "/" то NetMask[NetMask.find('/')::]
# Mask = NetMask[1+NetMask.find('/')::]

# Преобразуем строковое значение маски в цифровое
Mask = int(NetMask[1+NetMask.find('/')::])

# Согласно полученной маске создаём строку из единиц и нулей
MaskBin = ('1' * Mask + (32 - Mask) * '0')

# Далее строку преобразуем в список из восьми элементов
# Пользуемся срезами и не забываем,
# что срез идёт до второго числа НЕ ВКЛЮЧАЯ ЕГО
# см. стр. 92

MaskList = [MaskBin[0:8], MaskBin[8:16], MaskBin[16:24], MaskBin[24::]]

# Преобразуем текстовые значения в цифровые (стр. 131)

MaskList = [int(MaskList[I], 2) for I in range(4)]

# Преобразуем строку в список, элементы разделяем по точке
IP_LIST = Net.split('.')

# Преобразуем текстовые значения в цифровые

IP_LIST = [int(IP_LIST[I]) for I in range(4)]

# Создаём образец для вывода IP (см. стр. 101)

ip_template = '''
    ...: Network
    ...: {0:<8} {1:<8} {2:<8} {3:<8}
    ...: {0:08b} {1:08b} {2:08b} {3:08b}
    ...: '''

# Выводим

print(ip_template.format(IP_LIST[0], IP_LIST[1], IP_LIST[2], IP_LIST[3]))

# Опять получаем строковое значение битовой маски
# на этот раз с символом "/"

Mask = NetMask[NetMask.find('/')::]

# Создаём образец для вывода Mask

mask_template_bit = '''
    ...: Mask:
    ...: {}'''


mask_template = '''
    ...: {0:<8} {1:<8} {2:<8} {3:<8}
    ...: {0:8b} {1:08b} {2:08b} {3:08b}
    ...: '''

# Выводим

print(mask_template_bit.format(Mask))
print(mask_template.format(MaskList[0], MaskList[1], MaskList[2], MaskList[3]))

############
############
